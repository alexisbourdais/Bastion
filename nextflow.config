/*
===============================================================
 This script is largely based on the Genome quality assessment workflow from the Genera toolbox of Luc CORNET from the University of Liege:
 https://github.com/Lcornet/GENERA
 
 ---------------------------------------------------------------
 Contams Analysis Pipeline. Started September 2024.
 #### Homepage / Documentation
 https://github.com/alexisbourdais/
 #### Authors
 Alexis Bourdais
---------------------------------------------------------------
*/

///////////////////////////////////////////////////////////////////
//////////////////////    Process Parameters    ///////////////////
///////////////////////////////////////////////////////////////////

/* Singularity mount */
params.singularity = "-B /scratch:/scratch -B /home:/home -B /local:/local -B /db:/db -B /projects:/projects"

/* Database */
params.database="$baseDir/Database/"

params.db_busco="${params.database}busco_db/"
params.db_checkm2="${params.database}checkm2_uniref100.KO.1.dmnd"
params.db_eukcc="${params.database}eukcc2_db_ver_1.1/"
params.db_gunc="${params.database}gunc_db_progenomes2.1.dmnd"
params.db_kraken2="${params.database}kraken2_db/"
params.db_krona="${params.database}krona_db/"
params.db_gtdbtk="${params.database}gtdbtk_db/release220/"
params.db_checkm1="${params.database}checkm1_db/"
params.db_omark="${params.database}omark_db_LUCA.h5"
params.db_physeter="${params.database}physeter_db/life-tqmd-of73.dmnd"
params.taxdump="${params.database}taxdump/"
params.db_kmerfinder="${params.database}kmerfinder_db/"

/* Set-up DB */
params.setEukcc = false
params.setBusco = false
params.setGtdbtk = false
params.setKraken2 = false
params.setCheckm1 = false
params.setKrona = false
params.setGunc = false
params.setCheckm2 = false
params.setPhyseter = false
params.setOmark = false
params.setKmerfinder = false
params.setAll = false

/* Workflow */
params.workflow = ""

/* Input */
params.assemblyDir="$baseDir/Data/"
params.format="fasta"
params.assemblyFiles="${params.assemblyDir}/*.${params.format}"

/* Output */
params.resultsDir = "$baseDir/Results/"

/* Quast */
params.mode_quast="" //""=bacteria, eukaryote, fungus ...

/* Busco */
params.lineage_busco="auto-lineage" //bacteria_odb10, fungi_odb10, auto-lineage

/* Physeter */
params.taxlevel="phylum"
params.automode='label_first'

/* Kmerfinder */
params.taxon_kmerfinder="bacteria" //archae fungi protozoa

//////////////////////////////////////////////////////////////////////
//////////////////////    Nextflow parameters      ///////////////////
//////////////////////////////////////////////////////////////////////

nextflow.enable.dsl=2

conda.enabled = true
conda.channels = 'conda-forge,bioconda,defaults'
conda.createTimeout = '60 min'

singularity {
    enabled = true
    autoMounts = true
    runOptions = "${params.singularity}"
    pullTimeout = '60 min'
}

// Add Sylabs as library
apptainer.engineOptions = "apptainer remote add --no-login SylabsCloud cloud.sycloud.io"

// Maximum available cluster resources
params {
    max_memory = 200.GB
    max_cpus = 32
    max_time = 336.h
}

/* Report pipeline execution */
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

report {
    enabled = true
    file    = "${params.resultsDir}/pipeline_info/execution_report_${trace_timestamp}.html"
}

dag {
    enabled = true
    file    = "${params.resultsDir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

trace {
    enabled = true
    file    = "${params.resultsDir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}

timeline {
    enabled = true
    file    = "${params.resultsDir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}


////////////////////////////////////////////////////////////////////
////////////////////   Check max function   //////////////////////// (from nfcore community)
////////////////////////////////////////////////////////////////////

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

///////////////////////////////////////////////////////////
//////////////////////     Profile      ///////////////////
///////////////////////////////////////////////////////////

profiles {
    standard {
        process.executor = 'local'
        executor.cpus = 4
        executor.memory = 16.GB
    }

    slurm {
        process {
            executor = 'slurm'

            withLabel: process_low {
                cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
                memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 4.h   * task.attempt, 'time'    ) }
            }
            withLabel: process_medium {
                cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
                memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h   * task.attempt, 'time'    ) }
            }
            withLabel: process_high {
                cpus   = { check_max( 20    * task.attempt, 'cpus'    ) }
                memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 16.h  * task.attempt, 'time'    ) }
            }
        }
    }

    singularity {
        process {
            withName: 'busco|setup_Busco|busco_plot' {
                container = 'https://depot.galaxyproject.org/singularity/busco:5.8.0--pyhdfd78af_0'
            }
            withName: quast {
                container = 'https://depot.galaxyproject.org/singularity/quast:5.2.0--py39pl5321heaaa4ec_4'
            }
            withName: 'checkm2|setup_Checkm2' {
                container = 'https://depot.galaxyproject.org/singularity/checkm2:1.0.2--pyh7cba7a3_0'
            }
            withName: 'eukcc_folder|setup_Eukcc' {
                container = 'https://depot.galaxyproject.org/singularity/eukcc:2.1.0--pypyhdfd78af_0'
            }
            withName: 'gunc|setup_Gunc' {
                container = 'https://depot.galaxyproject.org/singularity/gunc:1.0.6--pyhdfd78af_0'
            }
            withName: 'gtdbtk|setup_Gtdbtk' {
                container = 'https://depot.galaxyproject.org/singularity/gtdbtk:2.4.0--pyhdfd78af_1'
            }
            withName: 'checkm1|setup_Checkm1' {
                container = 'https://depot.galaxyproject.org/singularity/checkm-genome:1.2.3--pyhdfd78af_1'
            }
            withName: 'krona|setup_Krona' {
                container = 'library://abourdais/default/krona'
                //container = 'oras://community.wave.seqera.io/library/krona_make:7b9bc73cb1841488'
            }
            withName: 'setup_Physeter|physeter|kraken_split' {
                container = "library://abourdais/default/bastion"
            }
            withName: 'setup_Kraken2|kraken2' {
                container = 'https://depot.galaxyproject.org/singularity/kraken2:2.1.3--pl5321h077b44d_4'
            }
            withName: prodigal {
                container = 'https://depot.galaxyproject.org/singularity/prodigal:2.6.3--h7b50bb2_10'
            }
            withName: gffread {
                container = 'https://depot.galaxyproject.org/singularity/gffread:0.12.7--hdcf5f25_4'
            }
            withName: 'setup_Omark|omark|omark_plot' {
                container = 'https://depot.galaxyproject.org/singularity/omark:0.3.0--pyh7cba7a3_0'
            }
            withName: 'setup_Kmerfinder|kmerfinder' {
                container = 'https://depot.galaxyproject.org/singularity/kmerfinder:3.0.2--hdfd78af_0'
            }
        }
    }

    conda {  
        process {
            withName: 'busco|setup_Busco|busco_plot' {
                conda = 'bioconda::busco' //does not work
            }
            withName: quast {
                conda = 'bioconda::quast'
            }
            withName: 'checkm2|setup_Checkm2' {
                conda = "bioconda::checkm2"
            }
            withName: 'eukcc_folder|setup_Eukcc' {
                conda = 'bioconda::eukcc'
            }
            withName: 'gunc|setup_Gunc' {
                conda = 'bioconda::gunc'
            }
            withName: 'gtdbtk|setup_Gtdbtk' {
                conda = 'bioconda::gtdbtk'
            }
            withName: 'checkm1|setup_Checkm1' {
                conda = 'bioconda::checkm-genome'
            }
            withName: 'krona|setup_Krona' {
                conda = 'bioconda::krona' 
            }
            withName: 'setup_Kraken2|kraken2' {
                conda = 'bioconda::kraken2'
            }
            withName: 'setup_Physeter|physeter|kraken_split' {
                container = "library://abourdais/default/bastion"
            }
            withName: prodigal {
                conda = 'bioconda::prodigal'
            }
            withName: gffread {
                conda = 'bioconda::gffread'
            }
            withName: 'setup_Omark|omark|omark_plot' {
                conda = 'bioconda::omark'
            }
            withName: 'setup_Kmerfinder|kmerfinder' {
                conda = 'bioconda::kmerfinder'
            }
        }
    }
}