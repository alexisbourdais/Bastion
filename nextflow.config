/*
===============================================================
 This script is largely based on the Genome quality assessment workflow from the Genera toolbox of Luc CORNET from the University of Liege:
 https://github.com/Lcornet/GENERA
 
 ---------------------------------------------------------------
 Contams Analysis Pipeline. Started September 2024.
 #### Homepage / Documentation
 https://github.com/alexisbourdais/
 #### Authors
 Alexis Bourdais
---------------------------------------------------------------
*/

///////////////////////////////////////////////////////////////////
//////////////////////    Process Parameters    ///////////////////
///////////////////////////////////////////////////////////////////

// Database
params.db_busco="/scratch/abourdais/Database/busco_downloads/"
params.db_checkm2="/scratch/abourdais/Database/DB-CheckM2/uniref100.KO.1.dmnd"
params.db_eukcc="/groups/holoe2plant/Moana/1_ASSEMBLY/QC/GEN_ERA/res_QC_assembly/GENERA-DB/eukcc/eukcc2_db_ver_1.1/"
params.db_gunc="/groups/holoe2plant/Moana/1_ASSEMBLY/QC/GEN_ERA/res_QC_assembly/GENERA-DB/guncDB/gunc_db_progenomes2.1.dmnd"
params.db_kraken2="/groups/holoe2plant/Moana/1_ASSEMBLY/QC/GEN_ERA/res_QC_assembly/GENERA-DB/Kraken/"
params.db_gtdbtk="/scratch/abourdais/Database/DB-GTDBTk/release220/"
params.db_checkm1="/scratch/abourdais/Database/DB-CheckM/"
params.taxdir="/scratch/abourdais/Database/DB-Genera/"
params.db_physeter="/groups/holoe2plant/Moana/1_ASSEMBLY/QC/GEN_ERA/res_QC_assembly/GENERA-DB/Physeter/life-tqmd-of73.dmnd"

// Working dir
params.baseDir = "$PWD"

// Input
params.assemblyDir="${params.baseDir}/Data/"
params.format="fasta"
params.assemblyFiles="${params.assemblyDir}/*.${params.format}"

// Output
params.resultsDir = "${params.baseDir}/Results/"

// Quast
params.mode_quast="" //""=bacteria, eukaryote, fungus ...

// Busco
params.mode_busco="genome" //genome, proteins 
params.lineage_busco="bacteria_odb10" //bacteria_odb10, fungi_odb10, auto-lineage

// Eukcc2
params.mode_eukcc="DNA"

// Physeter - Kraken
params.taxlevel="phylum"
params.automode = 'label_first'

///////////////////////////////////////////////////// A regler
params.idl="${params.taxdir}contam-labels.idl"

// Final report
params.ckcompleteness= '95'             // Final list: Minimum CheckM completeness, default = 95
params.ckcontamination = '5'            // Final list: Maximum CheckM contamination, default = 5
params.gunccss = '0.01'                 // Final list: Maximum GUNC css, default = 0.01
params.guncrrs = '0.5'                  // Final list: Minimum GUNC rrs, default = 0.5
params.physetercontamination = '100'    // Final list: Maximum Physeter contamination, default = 100 (unactivated by default)
params.krakencontamination = '100'      // Final list: Maximum Kraken contamination, default = 100 (unactivated by default)
params.bucompleteness = '0'             // Final list: Minimum BUSCO completeness, default = 0 (unactivated by default)
params.budups = '100'                   // Final list: Maximum BUSCO duplication, default = 100 (unactivated by default)
params.ck2completeness = '95'           // Final list: Minimum CheckM2 completeness, default = 95
params.ck2contamination = '5'           // Final list: Maximum CheckM2 contamination, default = 5
params.numcontigs = '1000'              // Final list: Maximum Number of contigs, default = 1000

//////////////////////////////////////////////////////////////////////
//////////////////////    Nextflow parameters      ///////////////////
//////////////////////////////////////////////////////////////////////

nextflow.enable.dsl=2

conda.enabled = true

singularity.enabled = true
singularity.autoMounts = true
singularity.runOptions = '-B /scratch:/scratch -B /home:/home -B /local:/local -B /db:/db -B /groups:/groups'

// Maximum available cluster resources
params {
    max_memory = 200.GB
    max_cpus = 32
    max_time = 336.h
}

report {
    enabled = true
    overwrite = true
    file = "${params.resultsDir}/Comtams_nextflow_report.html"
}

////////////////////////////////////////////////////////////////////
////////////////////   Check max function   //////////////////////// (from nfcore community)
////////////////////////////////////////////////////////////////////

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

///////////////////////////////////////////////////////////
//////////////////////     Profile      ///////////////////
///////////////////////////////////////////////////////////

profiles {
    standard {
        process.executor = 'local'
        executor.cpus = 4
        executor.memory = 16.GB
    }

    slurm {
        process {
            executor = 'slurm'

            withLabel: process_low {
                cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
                memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 4.h   * task.attempt, 'time'    ) }
            }
            withLabel: process_medium {
                cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
                memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h   * task.attempt, 'time'    ) }
            }
            withLabel: process_high {
                cpus   = { check_max( 20    * task.attempt, 'cpus'    ) }
                memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 16.h  * task.attempt, 'time'    ) }
            }
        }
    }

    singularity {
        process {
            withName: busco {
                container = 'https://depot.galaxyproject.org/singularity/busco:5.7.1--pyhdfd78af_1' //voir si prob gnuplot !?
            }
            withName: quast {
                container = 'https://depot.galaxyproject.org/singularity/quast:5.2.0--py39pl5321heaaa4ec_4'
            }
            withName: checkm2 {
                container = 'https://depot.galaxyproject.org/singularity/checkm2:1.0.2--pyh7cba7a3_0'
            }
            withName: eukcc_folder {
                container = 'https://depot.galaxyproject.org/singularity/eukcc:2.1.0--pypyhdfd78af_0'
            }
            withName: gunc {
                container = 'https://depot.galaxyproject.org/singularity/gunc:1.0.6--pyhdfd78af_0'
            }
            withName: gtdbtk {
                container = 'https://depot.galaxyproject.org/singularity/gtdbtk:2.4.0--pyhdfd78af_1'
                memory = 150.GB
            }
            withName: checkm1 {
                container = 'https://depot.galaxyproject.org/singularity/checkm-genome:1.2.3--pyhdfd78af_1'
            }
            withName: krona {
                container = 'https://depot.galaxyproject.org/singularity/krona:2.8.1--pl5321hdfd78af_1'
            }
            withLabel: contams {
                container = "/scratch/abourdais/Singularity/contams.sif"
            }
            withName: kraken2 {
                memory = 150.GB
            }
        }
    }

    conda {  
        process {
            withName: busco {
                conda = 'bioconda::busco' //'/home/genouest/inra_umr1349/abourdais/.conda/envs/busco' Probleme avec gnuplot
            }
            withName: quast {
                conda = '/local/miniconda3/envs/quast-5.0.2'
                //conda = 'bioconda::quast'
            }
            withName: checkm2 {
                conda = '/home/genouest/inra_umr1349/abourdais/.conda/envs/checkm2'
                //conda = 'bioconda::checkm2'
            }
            withName: eukcc_folder {
                conda = '/home/genouest/inra_umr1349/abourdais/.conda/envs/eukcc'
                //conda = 'bioconda::eukcc'
            }
            withName: gunc {
                conda = '/home/genouest/inra_umr1349/abourdais/.conda/envs/gunc'
                //conda = 'bioconda::gunc'
            }
            withName: gtdbtk {
                conda = '/home/genouest/inra_umr1349/abourdais/.conda/envs/gtdb'
                //conda = 'bioconda::gtdbtk'
                memory = 150.GB
            }
            withName: checkm1 {
                conda = '/home/genouest/inra_umr1349/abourdais/.conda/envs/checkm1'
                //conda = 'bioconda::checkm-genome'
            }
            withName: krona {
                conda = '/home/genouest/inra_umr1349/abourdais/.conda/envs/krona'
                //conda = 'bioconda::krona' 
            }
            withLabel: contams {
                container = '/scratch/abourdais/Singularity/contams.sif'
            }
            withName: kraken2 {
                memory = 150.GB
            }
        }
    }
}