#!/usr/bin/env nextflow

/*
===============================================================
 This script is largely based on the Genome quality assessment workflow from the Genera toolbox of Luc CORNET from the University of Liege:
 https://github.com/Lcornet/GENERA
 
 ---------------------------------------------------------------
 Bastion Pipeline. Started September 2024.
 #### Homepage / Documentation
 https://github.com/alexisbourdais/Bastion/
 #### Authors
 Alexis Bourdais
---------------------------------------------------------------
*/

///////////////////////////////////////////////////////////
//////////////////////       HELP       ///////////////////
///////////////////////////////////////////////////////////

def helpMessage() {
    log.info """

    Command : nextflow run Bastion.nf -profile slurm,singularity [option]

    REQUIRED parameter

    -profile [standard]/slurm,      Select profile standard (local) or slurm. Default: standard          
             singularity/conda      Select profile singularity or conda. 
                                    Physeter need singularity in both case.
    
    OPTIONAL parameter

    -resume                         used to resume a workflow from where it was previously stopped or interrupted

    Database
    --db_busco                      Path to database directory
    --db_checkm2                    Path to checkm2_uniref100.KO.1.dmnd
    --db_eukcc                      Path to database directory
    --db_gunc                       Path to gunc_db_progenomes2.1.dmnd
    --db_kraken2                    Path to database directory
    --db_krona                      Path to database directory
    --db_gtdbtk                     Path to database directory
    --db_checkm1                    Path to database directory
    --db_omark                      Path to database directory
    --db_physeter                   Path to life-tqmd-of73.dmnd
    --taxdump                       Path to taxdump
    --db_kmerfinder                 Path to database directory
    
    Assembly directory
    --assemblyDir                   Path to samples directory, default: "./Data/"
    --format                        File format (fna, fa ...), default: "fasta"

    Results directory
    --resultsDir                    Path to results directory, default: "./Results/"

    Busco
    --lineage_busco                 [auto-lineage], bacteria_odb10, fungi_odb10 ...

    Physeter
    --taxlevel                      [phylum]
    --automode                      [label_first]

    Kmerfinder
    --taxon_kmerfinder              [bacteria], archae, fungi, protozoa

    Quast
    --mode_quast                    [bacteria], eukaryote, fungus

    nextflow run Bastion.nf --help
    """.stripIndent()
}

// Show help message
params.help = false
if (params.help){
        helpMessage()
        exit 0
}

//////////////////////////////////////////////
////////////    Modules     //////////////////
//////////////////////////////////////////////

include { setup_Eukcc; eukcc_folder }                                       from './modules/eukcc'
include { setup_Checkm1; checkm1 }                                          from './modules/checkm1'
include { setup_Gunc; gunc }                                                from './modules/gunc'
include { setup_Kraken2; kraken2; kraken_split }                            from './modules/kraken2'
include { setup_Gtdbtk; gtdbtk }                                            from './modules/gtdbtk'
include { setup_Physeter; physeter }                                        from './modules/physeter'
include { setup_Busco; busco; busco_plot }                                  from './modules/busco'
include { setup_Checkm2; checkm2 }                                          from './modules/checkm2'
include { setup_Omark; omark; omark_plot }                                  from './modules/omark'
include { quast }                                                           from './modules/quast'
include { setup_Krona; krona as krona_kraken; krona as krona_physeter }     from './modules/krona'
include { prodigal }                                                        from './modules/prodigal'
include { gffread }                                                         from './modules/gffread'
include { final_report }                                                    from './modules/report'
include { setup_Kmerfinder; kmerfinder }                                    from './modules/kmerfinder'

///////////////////////////////////////////////////////////
//////////////////     Sub-Workflow     ///////////////////
///////////////////////////////////////////////////////////

workflow setup_wf {
    //Checkm2
    if (file(params.db_checkm2).exists()) {
        println "Checkm2 database found !" 
        checkm2_db_ch = Channel.of("Done")
        } 
    else {
        println "Checkm2 database not found ! Download launched"
        setup_Checkm2() 
        checkm2_db_ch = setup_Checkm2.out.XXX
        }
/*
    //Gunc
    if (file(params.db_gunc).exists()) {
        println "Gunc database found !" } 
    else {
        println "Gunc database not found ! Download launched"
        setup_Gunc() }

    //Physeter
    if (file(params.db_physeter).exists()) {
        println "Physeter database found !" } 
    else {
        println "Physeter database not found ! Download launched"
        setup_Physeter() }

    //Busco
    if (file(params.db_busco).isDirectory()) {
        println "Busco database found !" } 
    else {
        println "Busco database not found ! Download launched"
        setup_Busco() }

    //Eukcc
    if (file(params.db_eukcc).isDirectory()) {
        println "Eukcc database found !" } 
    else {
        println "Eukcc database not found ! Download launched"
        setup_Eukcc() }

    //Kraken2
    if (file(params.db_kraken2).isDirectory()) {
        println "Kraken2 database found !" } 
    else {
        println "Kraken2 database not found ! Download launched"
        setup_Kraken2() }

    //Krona
    if (file(params.db_krona).isDirectory()) {
        println "Krona database found !" } 
    else {
        println "Krona database not found ! Download launched"
        setup_Krona() }

    //Omark
    if (file(params.db_omark).isDirectory()) {
        println "Omark database found !" } 
    else {
        println "Omark database not found ! Download launched"
        setup_Omark() }

    //Checkm1
    if (file(params.db_checkm1).isDirectory()) {
        println "Checkm1 database found !" } 
    else {
        println "Checkm1 database not found ! Download launched"
        setup_Checkm1() }

    //Kmerfinder
    if (file(params.db_kmerfinder).isDirectory()) {
        println "Kmerfinder database found !" } 
    else {
        println "Kmerfinder database not found ! Download launched"
        setup_Kmerfinder() }
    
    //Gtdbtk
    if (file(params.db_gtdbtk).isDirectory()) {
        println "Gtdbtk database found !" } 
    else {
        println "Gtdbtk database not found ! Download launched"
        setup_Gtdbtk() }
*/
    emit:
    Channel.of(1, 2, 3)
}

workflow annotation_wf {
    take:
    assembly

    main:
    prodigal(assembly)
    gffread(prodigal.out)
    omark(gffread.out)
    omark_plot(omark.out.plot.collect())
    busco(gffread.out, "proteins")
    busco_plot(busco.out.plot.collect(), "proteins")

    emit:
    omark.out.report
}

workflow analysis_wf {

    take:
    setup_done

    main:
    data_file = Channel.fromPath("${params.assemblyFiles}")
    data_dir = Channel.fromPath("${params.assemblyDir}")
    gunc(data_dir)
    busco(data_file, "genome")
    busco_plot(busco.out.plot.collect(), "genome")
    quast(data_file)
    eukcc_folder(data_dir)
    checkm2(data_dir)
    checkm1(data_dir)
    annotation_wf(data_file)
    gtdbtk(data_dir)
    kmerfinder(data_file)
    physeter(data_file, params.taxdump)
    krona_physeter(physeter.out.krona, "physeter")
    kraken2(physeter.out.kraken)
    kraken_split(kraken2.out, physeter.out.kraken_split, params.taxdump)
    krona_kraken(kraken2.out, "kraken")
    final_report(
        busco.out.report.collectFile(name: 'busco_multi.report'), \
        quast.out.collectFile(name: 'quast_multi.report'), \
        checkm2.out, \
        gunc.out.report, \
        checkm1.out, \
        eukcc_folder.out, \
        gtdbtk.out, \
        physeter.out.report.collectFile(name: 'physeter_multi.report'), \
        kraken_split.out.collectFile(name: 'kraken2_multi.report'), \
        kmerfinder.out.report.collectFile(name: 'kmerfinder_multi.report'), \
        annotation_wf.out.collectFile(name: 'omark_multi.report')
    )
}

///////////////////////////////////////////////////////
//////////////////     Workflow     ///////////////////
///////////////////////////////////////////////////////

workflow {
    setup_wf()
    analysis_wf(setup_wf.out)
}

workflow.onComplete{
    if (workflow.success) {
        println("Workflow execution completed sucessfully !")
    } 
    else {
        println("Workflow execution completed with errors !")
    }
}